version: 2.1
orbs:
  node: circleci/node@4.7.0
  android: circleci/android@1.0.3
  rn: react-native-community/react-native@7.0.0

commands:
  last-commit:
    steps:
      - run:
          name: 'Get last commit'
          command: echo "export LAST_COMMIT=$(git rev-parse --verify HEAD)" >> $BASH_ENV

  detox_build_android:
    steps:
      - android/restore-gradle-cache
      - run: |
          npm install -g detox-cli react-native-cli
          detox build --configuration android
          cd android/app/build/outputs/apk && ls
      - android/save-gradle-cache

  start_react_native:
    steps:
      - run:
          background: true
          command: >
              yarn start

  adb_reserve:
    steps:
      - run: |
          lsof -i -P -n | grep 8081
          adb devices -l
          adb reverse tcp:8081 tcp:8081

  detox_build_ios:
    steps:
      - restore_cache:
          keys: 
            - ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}
      - run: |
          npm install -g detox-cli react-native-cli
          xcodebuild -workspace ios/yojeeDriverApp.xcworkspace -scheme YojeeDev -sdk iphonesimulator -derivedDataPath ios/build
      - save_cache:
          key: ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}
          paths:
            - ios/build/Build


  android_emulator_start:
    description: Installs and starts an Android emulator with the given version and name.
    parameters:
      build_tools_version:
        default: 28.0.3
        description: The version of the Android build tools to install.
        type: string
      device_name:
        default: TestingAVD
        description: >-
          The name of the AVD. You use this name to tell which device to run tests
          on.
        type: string
      logcat_grep:
        default: com.reactnativecommunity
        description: >-
          ADB logs will be shown in the "Start Android Emulator" commands, but we
          filter it using grep to avoid noise. You can specify additional strings to
          grep for. Make sure you escape special characters.
        type: string
      platform_version:
        default: android-28
        description: >-
          The version of android to run on the emulator. Usually in the form of
          "android-28".
        type: string
    steps:
      - run:
          command: >
            yes | sdkmanager "platform-tools" "tools" >/dev/null

            yes | sdkmanager "platforms;<<parameters.platform_version>>"
            "system-images;<<parameters.platform_version>>;google_apis;x86_64"
            >/dev/null

            yes | sdkmanager "emulator" --channel=3 >/dev/null

            yes | sdkmanager "build-tools;<<parameters.build_tools_version>>"
            >/dev/null

            yes | sdkmanager --licenses >/dev/null

            yes | sdkmanager --list
          name: Install Android Emulator
          shell: /bin/bash -e
      - run:
          command: |
            adb start-server
            adb devices
            adb kill-server
            ls -la ~/.android
          name: ADB Start Stop
      - run:
          command: >-
            yes | avdmanager create avd --force --name <<parameters.device_name>>
            --package "system-images;<<parameters.platform_version>>;google_apis;google_play_services;x86_64"
          name: Create Android Emulator
      - run:
          background: true
          command: >
            $ANDROID_HOME/emulator/emulator @<<parameters.device_name>> -version

            $ANDROID_HOME/emulator/emulator @<<parameters.device_name>> -cores 1
            -gpu auto -accel on -memory 1024 -no-audio -no-snapshot -no-boot-anim
            -no-window -logcat *:W | grep -i
            'ReactNative\|<<parameters.logcat_grep>>'
          name: Start Android Emulator (background)
      - run:
          command: >
            export BOOT=""

            echo "Waiting for AVD to finish booting"

            export PATH=$(dirname $(dirname $(command -v
            android)))/platform-tools:$PATH

            until [[ "$BOOT" =~ "1" ]]; do
              sleep 5
              export BOOT=$(adb -e shell getprop sys.boot_completed 2>&1)
            done

            sleep 15

            adb shell settings put global window_animation_scale 0

            adb shell settings put global transition_animation_scale 0

            adb shell settings put global animator_duration_scale 0

            echo "Android Virtual Device is now ready."
          name: Wait for AVD to be ready
          no_output_timeout: 5m


jobs:
  setup_node:
    working_directory: ~/driver-react-native
    docker:
      - image: cimg/node:12.16

    steps:
      - last-commit

      - checkout:
          path: ~/driver-react-native

      - attach_workspace:
          at: ~/driver-react-native

      - restore_cache:
          key: yarn-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - persist_to_workspace:
          root: ~/driver-react-native
          paths:
            - .

  detox_android:
    executor:
      name: rn/macos
    steps:
      - attach_workspace:
          at: ~/dzung-test-circleCI
      - checkout
      - rn/setup_macos_executor:
          homebrew_cache: true
          node_version: "14"
      - rn/yarn_install:
          # basically because of this https://github.com/react-native-community/react-native-circleci-orb/issues/66
          cache: false
      - android_emulator_start:
          device_name: Pixel_5_API_32
          build_tools_version: 30.0.0
          platform_version: android-30
      # - detox_build_android
      # - rn/yarn_install
      #     # basically because of this https://github.com/react-native-community/react-native-circleci-orb/issues/66
      #     cache: false

      # - run:
      #     # For my app and react native in general java8 is needed. The default version on this executor was default to java10 for some reason, so this kinda solve that issue.
      #     # just installing java, android sdk, and needed tools.
      #     command: >
      #       echo $ANDROID_HOME
      #       java -version
      #       brew tap adoptopenjdk/openjdk
      #       brew install --cask adoptopenjdk/openjdk/adoptopenjdk8
      #       java -version
      #       export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
      #       brew install --cask android-sdk
      #       export ANDROID_HOME=/usr/local/share/android-sdk
      #       export PATH=$PATH:$ANDROID_HOME/platform-tools
      #       export PATH=$PATH:$ANDROID_HOME/tools
      #       export PATH=$PATH:$ANDROID_HOME/tools/bin
      #       export PATH=$PATH:$ANDROID_HOME/emulator
      #       mkdir -p ~/.android && touch ~/.android/repositories.cfg
      #       java -version
      #       yes | sdkmanager "platform-tools" "tools" >/dev/null
      #       yes | sdkmanager "platforms;android-29"
      #       "system-images;android-29;default;x86_64" >/dev/null
      #       yes | sdkmanager "emulator" --channel=3 >/dev/null
      #       yes | sdkmanager "build-tools;29.0.2" >/dev/null
      #       yes | sdkmanager --licenses >/dev/null
      #       yes | sdkmanager --list
      #     name: Install Android Emulator
      #     shell: /bin/bash -e
      - add_ssh_keys:
          fingerprints:
            - "33:80:f5:7a:73:07:39:1e:d1:c4:59:ea:5b:da:5d:12"
      # - run:
      #     command: |
      #       adb start-server
      #       adb devices
      #       adb kill-server
      #       ls -la ~/.android
      #     name: ADB Start Stop
      # - run:
      #     # Note we are using a pixel_xl as the test device, feel free to change it for one better fits your app
      #     command: |
      #       export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
      #       avdmanager create avd --force --name Pixel_2_API_29 --package "system-images;android-29;default;x86_64" --tag default --device pixel_xl
      #     name: Create Android Emulator
      # - run:
      #     background: true
      #     command: |
      #       export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
      #       $ANDROID_HOME/emulator/emulator @Pixel_2_API_29 -version
      #       $ANDROID_HOME/emulator/emulator @Pixel_2_API_29 -cores 2 -gpu auto
      #       -accel on -memory 2048 -no-audio -no-snapshot -no-boot-anim
      #       -no-window -logcat *:W | grep -i
      #       'ReactNative\|com.reactnativecommunity'
      #     name: Start Android Emulator (background)
      # - run:
      #     command: >
      #       # export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
      #       export BOOT=""
      #       echo "Waiting for AVD to finish booting"
      #       export PATH=$(dirname $(dirname $(command -v
      #       android)))/platform-tools:$PATH
      #       until [[ "$BOOT" =~ "1" ]]; do
      #         sleep 5
      #         export BOOT=$(adb -e shell getprop sys.boot_completed 2>&1)
      #       done
      #       sleep 15
      #       adb shell settings put global window_animation_scale 0
      #       adb shell settings put global transition_animation_scale 0
      #       adb shell settings put global animator_duration_scale 0
      #       echo "Android Virtual Device is now ready."
      #     name: Wait for AVD to be ready
      #     no_output_timeout: 5m
      # Creates the detox build using the orb job
      - detox_build_android
      - start_react_native
      - run:  |
            detox test -c android --loglevel trace --record-videos all
      - run: node e2e/generate_cucumber_html_report
      - store_artifacts:
          path: e2e/cucumber-report

  detox_ios:
    executor:
      name: rn/macos
      xcode_version: 12.5.1
    steps:
      - checkout
      - rn/setup_macos_executor
      - rn/yarn_install:
          cache_folder: ~/.cache/yarn
      - rn/pod_install
      - rn/ios_simulator_start:
          device: iPhone 12
      - start_react_native
      - detox_build_ios
      - run: DETOX_CONFIGURATION=ios.sim.release npx cucumber-js
      - store_artifacts:
          path: e2e/cucumber-json

workflows:
  e2e:
    jobs:
      - detox_android
      # - detox_ios:
      #     filters:
      #       branches:
      #         only:
      #           - /detox_automation\/qa.*/
